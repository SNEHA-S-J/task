from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.shared import OxmlElement, qn
from typing import List, Dict, Any
import io

class DocumentEditor:
    """Document editor for creating reviewed documents with compliance feedback."""
    
    def __init__(self):
        pass
    
    def create_reviewed_document(self, original_doc: Dict[str, Any], issues: List[Dict[str, Any]]) -> Document:
        """Create a reviewed document with compliance feedback."""
        
        # Create new document
        doc = Document()
        
        # Add title
        title = doc.add_heading('ADGM Compliance Review Report', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Add document info
        doc.add_heading('Document Information', level=1)
        doc.add_paragraph(f"Filename: {original_doc.get('filename', 'Unknown')}")
        doc.add_paragraph(f"Type: {original_doc.get('type', 'Unknown')}")
        doc.add_paragraph(f"Review Date: {original_doc.get('review_date', 'Not specified')}")
        
        # Add original content
        doc.add_heading('Original Document Content', level=1)
        if 'content' in original_doc:
            doc.add_paragraph(original_doc['content'])
        
        # Add compliance issues
        if issues:
            doc.add_heading('Compliance Issues Found', level=1)
            
            for i, issue in enumerate(issues, 1):
                doc.add_heading(f"Issue {i}: {issue.get('section', 'General')}", level=2)
                
                # Issue details
                p = doc.add_paragraph()
                p.add_run("Description: ").bold = True
                p.add_run(issue.get('description', 'No description provided'))
                
                p = doc.add_paragraph()
                p.add_run("Severity: ").bold = True
                p.add_run(issue.get('severity', 'Unknown'))
                
                p = doc.add_paragraph()
                p.add_run("Suggestion: ").bold = True
                p.add_run(issue.get('suggestion', 'No suggestion provided'))
                
                p = doc.add_paragraph()
                p.add_run("ADGM Reference: ").bold = True
                p.add_run(issue.get('reference', 'Not specified'))
                
                doc.add_paragraph()  # Add spacing
        else:
            doc.add_heading('Compliance Status', level=1)
            doc.add_paragraph("✅ No compliance issues found. Document meets ADGM requirements.")
        
        # Add recommendations
        doc.add_heading('Recommendations', level=1)
        doc.add_paragraph(
            "Please review all identified issues and make necessary corrections "
            "before submitting to ADGM. Ensure all required documents and sections "
            "are included as per ADGM regulations."
        )
        
        # Add footer
        doc.add_paragraph()
        doc.add_paragraph("---")
        doc.add_paragraph(
            "This report was generated by the ADGM Corporate Document Review Agent. "
            "For questions, please consult ADGM official documentation or contact ADGM directly."
        )
        
        return doc
    
    def add_compliance_notes(self, doc: Document, issues: List[Dict[str, Any]]) -> Document:
        """Add compliance notes to an existing document."""
        
        # Add page break
        doc.add_page_break()
        
        # Add compliance section
        doc.add_heading('ADGM Compliance Notes', 0)
        
        if issues:
            doc.add_paragraph("The following compliance issues were identified:")
            
            for issue in issues:
                doc.add_heading(f"Issue: {issue.get('section', 'General')}", level=2)
                
                # Create table for issue details
                table = doc.add_table(rows=4, cols=2)
                table.style = 'Light Shading Accent 1'
                
                # Fill table
                table.cell(0, 0).text = "Description"
                table.cell(0, 1).text = issue.get('description', '')
                
                table.cell(1, 0).text = "Severity"
                table.cell(1, 1).text = issue.get('severity', '')
                
                table.cell(2, 0).text = "Suggestion"
                table.cell(2, 1).text = issue.get('suggestion', '')
                
                table.cell(3, 0).text = "Reference"
                table.cell(3, 1).text = issue.get('reference', '')
                
                doc.add_paragraph()
        else:
            doc.add_paragraph("✅ No compliance issues found.")
        
        return doc
    
    def create_summary_report(self, documents: List[Dict[str, Any]], report: Dict[str, Any]) -> Document:
        """Create a summary report for all documents."""
        
        doc = Document()
        
        # Title
        title = doc.add_heading('ADGM Compliance Summary Report', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Executive summary
        doc.add_heading('Executive Summary', level=1)
        doc.add_paragraph(
            f"This report summarizes the compliance review of {report.get('total_documents', 0)} "
            f"documents for {report.get('process_type', 'the selected process')}."
        )
        
        # Key metrics
        doc.add_heading('Key Metrics', level=1)
        
        # Create metrics table
        table = doc.add_table(rows=3, cols=2)
        table.style = 'Light Shading Accent 1'
        
        table.cell(0, 0).text = "Total Documents"
        table.cell(0, 1).text = str(report.get('total_documents', 0))
        
        table.cell(1, 0).text = "Required Documents"
        table.cell(1, 1).text = str(report.get('required_documents', 0))
        
        table.cell(2, 0).text = "Missing Documents"
        table.cell(2, 1).text = str(len(report.get('missing_documents', [])))
        
        # Missing documents
        if report.get('missing_documents'):
            doc.add_heading('Missing Documents', level=1)
            for missing in report.get('missing_documents', []):
                doc.add_paragraph(f"• {missing}", style='List Bullet')
        
        # Issues summary
        issues = report.get('issues', [])
        if issues:
            doc.add_heading('Issues Summary', level=1)
            doc.add_paragraph(f"Total issues found: {len(issues)}")
            
            # Group by severity
            severity_counts = {}
            for issue in issues:
                severity = issue.get('severity', 'Unknown')
                severity_counts[severity] = severity_counts.get(severity, 0) + 1
            
            for severity, count in severity_counts.items():
                doc.add_paragraph(f"• {severity}: {count} issues")
        
        # Recommendations
        doc.add_heading('Recommendations', level=1)
        doc.add_paragraph(
            "1. Address all high-severity issues immediately\n"
            "2. Complete missing documents as per ADGM requirements\n"
            "3. Review medium-severity issues before submission\n"
            "4. Ensure all documents meet ADGM formatting standards"
        )
        
        return doc
    
    def save_document(self, doc: Document, filename: str) -> bytes:
        """Save document to bytes buffer."""
        buffer = io.BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        return buffer.getvalue()
